nonterminals=program declaration type declist iostmt assignstmt stmtlist stmt simplstmt structstmt ifstmt whilestmt condition expression term factor SISAU forstmt RELATION dataType idlist operator
alphabet=intreg intregSir incepe citeste daca si afiseaza altfel sau id pentru rational cat opreste cat ; , ( ) [ ] { } <== + * / % - = <= >= < > !=
initial_state=program
productions=program->incepe { stmtlist } ~ stmtlist->stmt | stmt stmtlist  ~ stmt->simplstmt ; | structstmt ~ simplstmt->declaration | assignstmt | iostmt ~ assignstmt->id <== expression ~ expression->id operator expression | id ~ operator->* | / | % | + | - ~ iostmt->citeste ( id ) | afiseaza ( id ) ~ structstmt->ifstmt | forstmt ~ ifstmt->daca ( condition ) { stmtlist } | daca ( condition ) { stmtlist } altfel { stmtlist } ~ condition->expression RELATION expression | expression RELATION expression SISAU condition ~ SISAU->si | sau ~ forstmt->pentru ( assignstmt , condition , assignstmt ) { stmtlist } ~ RELATION-> < | > | <= | >= | != | = ~ dataType-> intreg | rational | intregSir ~ idlist-> id | id , idlist ~ declaration-> dataType idlist